// !main.rs
use log;
use sqlx::PgPool;
use std::{default, net::TcpListener};
use tracing::subscriber::set_global_default;
use tracing::Subscriber;
use tracing_bunyan_formatter::{BunyanFormattingLayer, JsonStorageLayer};
use tracing_log::LogTracer;
use tracing_subscriber::filter::EnvFilter;
use tracing_subscriber::{layer::SubscriberExt, Registry};
use zero2prod::{configuration::configuration_get, startup::run};
async fn get_subscriber(name: String, filter_level: String) -> impl Subscriber {
    LogTracer::init().expect("Get log tracer logger failed");
    let env_filter = EnvFilter::from_default_env();
    let formatting_layer = BunyanFormattingLayer::new(name, std::io::stdout);
    let subscriber = Registry::default()
        .with(env_filter)
        .with(formatting_layer)
        .with(JsonStorageLayer);
    return subcriber;
}
#[tokio::main]
async fn main() -> std::io::Result<()> {
    // Bubble up the io::Error if we failed to bind the address
    // // Otherwise call .await on our Server
    LogTracer::init().expect("Get log tracer logger");

    let env_filter = EnvFilter::try_from_default_env().unwrap_or_else(|_| EnvFilter::new("debug"));

    let formating_layer =
        BunyanFormattingLayer::new(String::from("DarwinBackEnd"), std::io::stdout);

    let subscriber = Registry::default()
        .with(env_filter)
        .with(JsonStorageLayer)
        .with(formating_layer);

    set_global_default(subscriber).expect("Failed to set subscriber");
    let configuration = configuration_get().unwrap();
    //let connection = PgConnection::connect(&configuration.database.connect_string
    let connection_pool = PgPool::connect(&configuration.database.connect_string())
        .await
        .expect("Get PgPool to create connection to database");

    let address = format!("127.0.0.1:{}", configuration.application_port);
    let listener = TcpListener::bind(address).expect("Failed to bind random port");
    //let port = listener.local_addr().unwrap().port();
    //let server = zero2prod::run(listener).expect("Unable to run the http server");
    let port = listener.local_addr().unwrap().port();
    println!("Run program at port {port}");
    run(listener, connection_pool)?.await
}
